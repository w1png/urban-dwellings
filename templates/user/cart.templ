package user_templates

import "fmt"
import "github.com/w1png/go-htmx-ecommerce-template/models"
import "github.com/w1png/go-htmx-ecommerce-template/templates/scripts"
import "github.com/w1png/go-htmx-ecommerce-template/templates/components"
import "github.com/w1png/go-htmx-ecommerce-template/file_storage"

func GetTotal(cart_products []*models.CartProduct) (total int) {
for _, product := range cart_products {
total += product.Price * product.Quantity
}
return
}

templ cartPage(cart_products []*models.CartProduct) {
<div class="container mx-auto mt-20 flex flex-col gap-8 px-2">
  if len(cart_products) == 0 {
  <div class="grow h-screen flex flex-col gap-4 items-center justify-center">
    <p class="text-3xl font-bold">Корзина пуста</p>
    <a class="submit" href="/">
      На главную
    </a>
  </div>
  } else {
  <div class="flex flex-row justify-between">
    <p class="text-3xl font-bold">Корзина</p>
    <p class="text-2xl">
      Итого:
      { fmt.Sprintf("%d", GetTotal(cart_products)) }₽
    </p>
  </div>
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
    <div class="flex flex-col gap-4 lg:border-r px-4">
      for _, product := range cart_products {
      <div class="flex flex-row gap-4 border rounded-2xl p-4">
        <div class="size-24">
          <img class="size-full object-cover rounded-md" src={
            file_storage.ObjectStorageId(product.Product.Image).GetUrl("image", "webp" ) } />
        </div>
        <div class="flex flex-col justify-center">
          <p class="text-xl font-bold">{ product.Title }</p>
          <div class="flex flex-row gap-2">
            <p>{ fmt.Sprintf("%d", product.Price) }₽</p>
            <p>x</p>
            <p>{ fmt.Sprintf("%d", product.Quantity) }шт.</p>
          </div>
        </div>
      </div>
      }
    </div>
    <form class="flex flex-col gap-2" hx-post="/api/checkout" hx-swap="outerHTML" hx-target="body"
      hx-target-error="#error">
      @components.LabeledInput("ФИО", "text", "name", "name", "", "", "w-full")
      @components.LabeledInput("Адрес электронной почты", "email", "email", "email", "", "", "w-full")
      @components.LabeledInput("Номер телефона", "text", "phone_number", "phone_number", "", "", "w-full")
      @components.LabeledTextarea("Комментарий", "comment", "comment", "", "")
      <p id="error" class="text-red-500 text-sm"></p>
      <button type="submit" class="submit">Оформить заказ</button>
    </form>
  </div>
  }
</div>
}

templ Cart(cart_products []*models.CartProduct) {
@Base("Корзина") {
@cartPage(cart_products)
}
}

templ CartApi(cart_products []*models.CartProduct) {
@Navbar()
@cartPage(cart_products)
@scripts.SetTitle("Корзина")
}
